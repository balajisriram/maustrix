classdef flatHazard<delayManager

    properties
        percentile=[];
        value=[];
        fixedDelayMs=[];
    end
    
    methods
        function f=flatHazard(percentile, value, fixedDelayMs)
            % the subclass flatHazard class
            % OBJ=flatHazard(percentile, value, fixedDelayMs)
            % percentile - this percentage of all delays are less than value (ie "99% of all trials are shorter than 10 sec")
            % value - in ms
            % fixedDelayMs - a fixed delay that is added to the random delay generated by the flatHazard function
            f=f@delayManager('flatHazard function');
            
            assert(isscalar(percentile) && isnumeric(percentile) && percentile>0 && percentile<=1,'flatHazard:improperValue','percentile must be >0 and <=1')
            f.percentile=percentile;
            
            assert(isscalar(value) && isnumeric(value) && value>0,'flatHazard:improperValue','value must be >0');
            f.value=value;
            
            assert(isscalar(fixedDelayMs) && isnumeric(fixedDelayMs) && fixedDelayMs>=0,'flatHazard:improperValue','fixedDelayMs must be >=0');
            f.fixedDelayMs=fixedDelayMs;
        end
        
        function d = calcAutoRequest(hzd)
            % returns autoRequest delay in terms of ms

            % continuous (exponential function)
            p = -hzd.value/log(1-hzd.percentile);
            d=exprnd(p)+hzd.fixedDelayMs;
        end
    end
end

